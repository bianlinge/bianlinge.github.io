<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringApplicationContext 容器创建过程</title>
      <link href="/2020/01/14/SpringApplicationContext-%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/01/14/SpringApplicationContext-%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-ApplicationContext-容器创建过程"><a href="#Spring-ApplicationContext-容器创建过程" class="headerlink" title="Spring ApplicationContext 容器创建过程"></a>Spring ApplicationContext 容器创建过程</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Prepare this context for refreshing.</span>            <span class="token comment" spellcheck="true">//刷新前的预处理</span>            <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token operator">>>></span><span class="token operator">>>></span><span class="token operator">></span><span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">// Initialize any placeholder property sources in the context environment</span>                    <span class="token comment" spellcheck="true">// 初始化一些属性设置;子类自定义个性化属性设置方法</span>                    <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Validate that all properties marked as required are resolvable</span>                    <span class="token comment" spellcheck="true">// see ConfigurablePropertyResolver#setRequiredProperties</span>                    <span class="token comment" spellcheck="true">//校验属性的合法等</span>                    <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Allow for the collection of early ApplicationEvents,</span>                    <span class="token comment" spellcheck="true">// to be published once the multicaster is available...</span>                    <span class="token comment" spellcheck="true">//保存容器中早期的事件</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>ApplicationEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>            <span class="token comment" spellcheck="true">//获取BeanFactory </span>            <span class="token number">2</span><span class="token punctuation">.</span>ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">>>></span><span class="token operator">>>></span><span class="token operator">></span><span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">//刷新[创建]BeanFacatory DefaultListableBeanFactory 对象</span>                    <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//返回[获取]DefaultListableBeanFactory</span>                    ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean factory for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> beanFactory<span class="token punctuation">;</span>                    <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>            <span class="token comment" spellcheck="true">// BeanFactory 与准备工作 属性设置(BeanFactory的类加载器 支持表达式解析器)</span>            <span class="token number">3</span><span class="token punctuation">.</span><span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>                <span class="token comment" spellcheck="true">//BeanFacatory准备工作完成的后置处理的工作</span>                <span class="token number">4</span><span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>                <span class="token comment" spellcheck="true">/*执行 BeanFactoryPostProcessors的方法 --BeanFactory 的后置 处理器.                在BeanFactory标准初始化之后执行,就是前4步的操作                两个接口:BeanFactoryPostProcessor,BeanDefinitionRegistryPostProcessor 是BeanFactoryPostProcessor的子接口                先执行子接口BeanDefinitionRegistryPostProcessor后执行BeanFactoryPostProcessor                */</span>                <span class="token number">5</span><span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>                <span class="token comment" spellcheck="true">/*注册BeanPostProcessor Bean的后置处理器[把BeanPostProcessor添加到beanFactory],拦截Bean的注册过程                在Bean的创建不同时期执行不同的BeanPostProcessor 及子类                */</span>                <span class="token number">6</span><span class="token punctuation">.</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>                <span class="token comment" spellcheck="true">//初始化MessageSource 国际化功能:消息绑定 消息解析</span>                <span class="token comment" spellcheck="true">//MessageSource 取出国际化配置文件中的某key:按照区域信息获取</span>                <span class="token number">7</span><span class="token punctuation">.</span><span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>                <span class="token comment" spellcheck="true">/*                初始化事件派发器                */</span>                <span class="token number">8</span><span class="token punctuation">.</span><span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>                <span class="token comment" spellcheck="true">// 留给子容器 子类重写该方法 在容器刷新的时候可以自定义逻辑</span>                <span class="token number">9</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>                <span class="token comment" spellcheck="true">// 给容器中将所有ApplicationListener添加到ApplicationEventMulticaster中,注册进来</span>                <span class="token number">10</span><span class="token punctuation">.</span><span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>                <span class="token comment" spellcheck="true">/*                preInstantiateSingletons()初始化所有生下来的单实例Bean                1)获取容器中所有的Bean 依次进行初始化和创建对象                2)获取Bean的定义信息:RootBeanDefinition                3)判断Bean不是抽象的 是单实例的 不是懒加载的                   1),判断是否是FactoryBean 是不是实现了FactoryBean接口的Bean                   2),不是工厂Bean 就用getBean(beanname)创建对象                        // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.                         resolveBeforeInstantiation(beanName, mbdToUse);                         postProcessBeforeInstantiation                */</span>                <span class="token number">11</span><span class="token punctuation">.</span><span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>                <span class="token comment" spellcheck="true">//完成BeanFactory的初始化创建工作 也就是IOC容器创建成功</span>                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                            <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>                <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>                <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Propagate exception to caller.</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>                <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>                <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx.conf</title>
      <link href="/2020/01/04/nginx-conf/"/>
      <url>/2020/01/04/nginx-conf/</url>
      
        <content type="html"><![CDATA[<pre><code>user  root;              #nginx配置用户或者组 ,启动nginx的权限.默认nobodyworker_processes  8;     #并发服务,允许生成的进程数 默认为 1 [number/auto]error_log  logs/error.log;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg    #error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;   #指定nginx进程运行文件存放地址events { #配置虚拟主机的相关参数，一个http中可以有多个server。     accept_mutex on;            #设置网路连接序列化，防止惊群现象发生，默认为on    multi_accept on;              #设置一个进程是否同时接受多个网络连接，默认为off    #use epoll;                    #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport    worker_connections  1024;   #最大连接数，默认为512}http {#可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置    include       mime.types;   #网络资源的请求类型[文件扩展名与文件类型映射表]    default_type  application/octet-stream; #默认文件类型，默认为text/plain    log_format  myFormat   &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                           &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                           &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; #自定义格式日志格式    access_log log/access.log myFormat;  #combined为日志格式的默认值    #access_log  off; #取消服务日志    sendfile        on;   #数据传输配置:允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。    #tcp_nopush     on;      # keepalive_timeout  0;   #限制某连接单个请求的上线    keepalive_timeout  65;   #连接超时时间，默认为75s，可以在http，server，location块。    #gzip  on; #gzip请求配置      include config/customer-portal.conf; #include配置文件的引入    error_page 404 https://www.baidu.com; #错误页     #负载均衡 upstream onelife{              server   10.28.85.132:9086 weight=1 max_fails=2 fail_timeout=900s;              server   192.168.10.121:3333 backup;  #热备    }     upstream imodule-sso-server{              server   10.28.85.134:9080 weight=1 max_fails=2 fail_timeout=900s;    } #    client_header_buffer_size 10240k;#    large_client_header_buffers 4 10240k;# 在server 指令中,我们同样可以配置多个 location 指令location 指令能将我们的字符串请求解析到对应的IP和端口,从而去获取正确的资源,location 也可以进行特殊配置,定制 网站的 404 ,500 等页面.    server {        keepalive_requests 120; #单连接请求上限次数。            listen 80;   #监听端口        server_name 10.28.85.130;  #监听地址        charset utf-8;#编码方式        location / {           root   html;           index  index.html index.htm;        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {             root   html; #根目录            #index vv.txt;  #设置默认页        }        location /onelife { #~*^.+$#     #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。            proxy_pass   http://onelife;    #请求转向onelife定义的服务器列表            proxy_set_header  Host       $http_host;            proxy_set_header  Cookie     $http_cookie;            proxy_set_header  X-Real-IP  $remote_addr;            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;            #client_max_body_size  300m;            expires -1;            #proxy_read_timeout 150;            client_max_body_size 300m;            client_body_buffer_size 256k;            proxy_connect_timeout 600;            proxy_read_timeout 600;            proxy_send_timeout 600;            proxy_buffer_size 128k;            proxy_buffers   4 64k;            proxy_busy_buffers_size 128k;            proxy_temp_file_write_size 128k;            break;        }        location /imodule-sso-server {            proxy_pass   http://imodule-sso-server;   #请求转向onelife定义的服务器列表            deny  127.0.0.1;  #拒绝的ip            allow 172.18.5.54; #允许的ip            proxy_set_header  Host       $http_host;            proxy_set_header  Cookie     $http_cookie;            proxy_set_header  X-Real-IP  $remote_addr;            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;            #client_max_body_size  300m;            expires -1;            #proxy_read_timeout 150;            client_max_body_size 300m;            client_body_buffer_size 256k;            proxy_connect_timeout 600;            proxy_read_timeout 600;            proxy_send_timeout 600;            proxy_buffer_size 128k;            proxy_buffers   4 64k;            proxy_busy_buffers_size 128k;            proxy_temp_file_write_size 128k;            break;        }    }       }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jasper-PDF 更改字体</title>
      <link href="/2019/12/29/jasper-PDF%20%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93/"/>
      <url>/2019/12/29/jasper-PDF%20%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h3 id="开发环境-Windows"><a href="#开发环境-Windows" class="headerlink" title="开发环境(Windows)"></a>开发环境(Windows)</h3><pre><code>1. 使用公司规定的字体. 引用要求的字体jar包</code></pre><p><img src="http://47.105.145.116/pictures/jasper%E5%AD%97%E4%BD%93.png" alt=""></p><pre><code>2.japser 只能加载.ttf的字体,本地JasperStudio 制作时可以设置 PDF Font Name =C:\Windows\Fonts\msyh.ttf(微软雅黑)进行本地开发.</code></pre><h3 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h3><p>第一步:在classpath路径下 添加字体.</p><hr><p>第二步:</p><p>PDF Embedded = false</p><p>PDF Encodong = IDentity-H(Unicode with horizontal writing)</p><p>PDF Font Name =classpath:file\msyh.ttf</p><p><img src="http://47.105.145.116/pictures/fontpath.png" alt=""></p><hr><p>第三步:</p><p>在classpath路径下添加 jasperreports.properties 属性文件 不然会报改字体找不到错误</p><p>文件内容为： </p><p>net.sf.jasperreports.awt.ignore.missing.font=true </p>]]></content>
      
      
      <categories>
          
          <category> Jasper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JasperPDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 访问文件路径</title>
      <link href="/2019/12/26/Nginx-%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/12/26/Nginx-%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="root-和-alias的区别"><a href="#root-和-alias的区别" class="headerlink" title="root 和 alias的区别"></a>root 和 alias的区别</h1><p>nginx 目录结构</p><p>/usr/local/nginx 根目录</p><blockquote><p>|—-html</p></blockquote><blockquote><blockquote><p>|—–hexo</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>|—–index.html</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>|—–iamge</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><p>|—–xo.jpg</p></blockquote></blockquote></blockquote></blockquote><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><pre><code>location / {    root html/hexo    index index.html}</code></pre><p>浏览器地址栏访问<br><a href="http://47.105.145:80/" target="_blank" rel="noopener">http://47.105.145:80/</a></p><p>实际路径:/usr/local/nginx/hexo/indexhtml</p><pre><code>location /hexo {    root  html    index index.html}</code></pre><p>浏览器地址栏访问<br><a href="http://47.105.145:80/hexo" target="_blank" rel="noopener">http://47.105.145:80/hexo</a></p><p>实际路径:/usr/local/nginx/hexo/indexhtml</p><pre><code>location /路径名 必须是root 路径下的子路径root: 配置的路径html+访问的/hexo 构成访问的静态资源路径</code></pre><hr><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><pre><code>location /imag {    alias  html/hexo/imag    index  xo.jpg}</code></pre><p>浏览器地址栏访问:<a href="http://47.105.145:80/imag" target="_blank" rel="noopener">http://47.105.145:80/imag</a></p><p>实际路径:/usr/local/nginx/hexo/imag/xo.jpg</p><pre><code>location /love {    alias  html/hexo/imag    index  xo.jpg}</code></pre><p>浏览器地址栏访问:<a href="http://47.105.145:80/love" target="_blank" rel="noopener">http://47.105.145:80/love</a></p><p>实际路径:/usr/local/nginx/hexo/imag/xo.jpg</p><pre><code>web服务器将会返回服务器上 /usr/local/nginx/hexo/imag/xo.jpg注意这里是imag，因为alias会把location后面配置的路径丢弃掉，跟love 没有关系,把当前匹配到的目录指向到指定的目录。</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ngix静态访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo介绍</title>
      <link href="/2019/12/19/hexo%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/12/19/hexo%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo使用介绍 </tag>
            
            <tag> hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
